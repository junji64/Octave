% Plotting  =============================================

>> t = [0:0.01:0.98];
>> t
>> y1 = sin(2*pi*4*t);
>> plot(t,y1);
>> y2 = cos(2*pi*4*t);
>> plot(t,y2);
>> plot(t,y1);
>> hold on;
>> plot(t,y2,'r');
>> xlabel('time'), ylabel('value');
>> legend('sin','cos');
>> title('my plot');
>> cd 'C:\Users\me\Desktop'; print -dpng 'myPlot.png';
>> close;
>> figure(1); plot(t,y1);
>> figure(2); plot(t,y2);
>> subplot(1,2,1);   % Divides plot 1x2 grid, access the first element
>> plot(t,y1);
>> subplot(1,2,2);
>> plot(t,y2);
>> axis([0.5 1 -1 1]);
>> clf;
>> A = magic(5)
>> imagesc(A), colorbar, colormap gray;
>> A(1,2)
>> A(4,5)
>> imagesc(magic(15)), colorbar, colormap gray;
>> a=1, b=2, c=3,
>> a=1; b=2; c=3;

% Control Statement - for, while, if statements

>> v = zeros(10,1)
>> for i=1:10,
     	v(i) = 2^i;
      end;
>> v 
>> indices = 1:10
>> for i=indices,
    	disp(i);
      end;<br>>> help for
>> i = 1;
>> while i &lt;= 5,
    	v(i) = 100;
     	i=i+1;
      end;
>> v
>> i=1;
>> while true,
     	v(i) = 000;
     	i = i+1;
     	if i == 6,
     		break;
    	end;
      end;
>> v
>> v(1)
>> v(1) = 2;
>> if v(1) == 1,
    	disp('The value is one');
      elseif v(1) == 2,
    	disp('The value is two');
      else
    	disp('The value is not one or two !');
      end;

% ---------------------- squareThisNumber.m ----------------------

function y = squareThisNumber(x)
y=x^2;

% ----------------------------------------------------------------

>> squareThisNumber(5)
>> pwd
>> cd 'C:\Users\me\Desktop'
>> squareThisNumber(5)
>> addpath('C:\Users\me\Desktop')
>> cd 'C:\'
>> squareThisNumber(5)
>>

%---------------------- squareAndCubeThisNumber.m -----------------

function [y1,y2] = squareAndCubeThisNumber(x)
y1=x^2; 
y2=x^3;

% ------------------------------------------------------------------

>> [a,b] = squareAndCubeThisNumber(5);
>> a
>> b

>> X = [1 1; 1 2; 1 3]
>> y = [1; 2; 3]
>> theta = [0; 1;]

% ---------------------- squareAndCubeThisNumber.m -------------------

function J = costFunctionJ(X, y, theta)
% X is the "design matrix" containing our training examples.
% y is the class labels
m = size(X,1);			% number of training examples
predictions = X*theta;	% predictions of hypothesis on all m examples
sqrErrors = (predictions-y).^2; 	% squared errors
J = 1/(2*m) * sum(sqrErrors);

% ------------------------------------------------------------------

>> j = costFunctionJ(X,y,theta)
>> theta = [0;0];
>> j = constFunctionJ(X,y,theta) 	% j = 2.3333
>> (1^2 + 2^2 + 3^2) / (2*3)
